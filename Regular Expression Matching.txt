public class Solution {
    public boolean isMatch(String s, String p) {
        char [] ss = s.toCharArray();
        char [] pp = p.toCharArray();
        // return recursive(ss, 0, pp, 0);
        boolean ans[][] = new boolean[ss.length+1][pp.length+1];
        
        ans[0][0] = true; // empty string empty pattern
        for(int i=0;i<=ss.length;i++) {
            //default ans[i][0] = false; for all i > 0 //  non-empty string, empty pattern
            for(int j=1;j<=pp.length;j++) {
                if (pp[j-1] != '*' ) {
                    ans[i][j] = i > 0 && matches(ss[i-1], pp[j-1]) && ans[i-1][j-1];
                } else {
                    ans[i][j] = j >=2 && (
                               ans[i][j-2] || 
                               (i > 0 && matches(ss[i-1], pp[j-1  -1])  && ans[i-1][j])
                               );
                }
            }
        }
        return ans[ss.length][pp.length];
    }
    
    boolean recursive(char[] s, int i, char[] p, int j) {
        if (i == s.length && j == p.length) return true;
        if (j == p.length) return false;
        
       if (j< p.length-1 && p[j+1] == '*') {
           
               return recursive(s, i, p, j+2) || i < s.length  && matches(s[i],p[j]) && recursive(s, i+1, p, j);
           
       } else 
       return  i < s.length && matches(s[i], p[j]) && recursive(s,i+1, p, j+1);
    }
    
    boolean matches(char c, char p) {
        if (p == '.') return true;
        else return c == p;
    }
}
Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 

Constraints:

1 <= s.length <= 20
1 <= p.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.